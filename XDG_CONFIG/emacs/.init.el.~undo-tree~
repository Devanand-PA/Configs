(undo-tree-save-format-version . 1)
"99f2575f794687e5932a27e5056ca9030dce0115"
[nil nil nil nil (26612 63101 817825 782000) 0 nil]
([nil nil (28) nil (26612 63101 817824 950000) 0 nil])
([nil nil ((2 . 4) (t 26607 54847 655146 344000)) nil (26612 63101 817824 750000) 0 nil])
([nil nil ((nil rear-nonsticky nil 31 . 32) (#("
" 0 1 (fontified nil face font-lock-comment-face)) . -61) (31 . 62) 3) nil (26612 63101 817824 382000) 0 nil])
([nil nil ((#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 32) (undo-tree-id128 . -1) (undo-tree-id129 . -1)) nil (26612 63101 817824 36000) 0 nil])
([nil nil ((#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 32) (undo-tree-id126 . -1) (undo-tree-id127 . -1)) nil (26612 63101 817823 44000) 0 nil])
([nil nil ((48 . 51) (45 . 45) (45 . 48) (#("l" 0 1 (fontified t)) . -45) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("e" 0 1 (fontified t)) . -46) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (#("u" 0 1 (fontified t)) . -47) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (#("v" 0 1 (fontified t)) . -48) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("e" 0 1 (fontified t)) . -49) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("n" 0 1 (fontified t)) . -50) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (#("-" 0 1 (fontified t)) . -51) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("d" 0 1 (fontified t)) . -52) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (#("a" 0 1 (fontified t)) . -53) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (#("r" 0 1 (fontified t)) . -54) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (#("k" 0 1 (fontified t)) . -55) (undo-tree-id124 . -1) (undo-tree-id125 . -1) 56) nil (26612 63101 817817 648000) 0 nil])
([nil nil (50) nil (26612 63300 646985 536000) 0 nil])
([nil nil ((32 . 34) (#("l" 0 1 (fontified t)) . -32) (undo-tree-id19 . -1) (#("l" 0 1 (fontified t)) . -33) (undo-tree-id20 . -1) 34 (32 . 34) (#("-" 0 1 (fontified t)) . -32) (undo-tree-id21 . -1) 33 (32 . 33) (t 26612 63101 856021 235000)) nil (26612 63300 646984 949000) 0 nil])
([nil nil ((nil rear-nonsticky nil 56 . 57) (#("
" 0 1 (fontified nil face font-lock-comment-face)) . -81) (56 . 82) 33) nil (26612 63300 646983 458000) 0 nil])
([nil nil ((#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 57)) nil (26612 63300 646982 890000) 0 nil])
([nil nil ((#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 57)) nil (26612 63300 646982 375000) 0 nil])
([nil nil ((70 . 78) (#("w" 0 1 (fontified t)) . -70) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (#("o" 0 1 (fontified t)) . -71) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("m" 0 1 (fontified t)) . -72) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (#("b" 0 1 (fontified t)) . -73) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("a" 0 1 (fontified t)) . -74) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (#("t" 0 1 (fontified t)) . -75) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (#(" " 0 1 (fontified t)) . -76) (undo-tree-id18 . -1) 77) nil (26612 63300 646978 700000) 0 nil])
([nil nil ((977 . 1216) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )" 0 239 (fontified nil)) . -977) (654 . 975) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages nil))" 0 279 (fontified nil)) . -654) (t 26612 63300 642046 458000)) nil (26612 63671 444206 692000) 0 nil])
([nil nil ((991 . 1230) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )" 0 239 (fontified nil)) . -991) (654 . 989) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages '(cape corfu dashboard evil lsp-ui undo-tree)))" 0 321 (fontified nil)) . -654) (t 26612 63671 442262 404000)) nil (26612 63671 485784 19000) 0 nil])
([nil nil ((nil rear-nonsticky nil 80 . 81) (#("
" 0 1 (fontified nil)) . -104) (80 . 105) 57 (t 26612 63671 482261 124000)) nil (26612 63731 267967 512000) 0 nil])
([nil nil ((57 . 59)) nil (26612 63731 267967 47000) 0 nil])
([nil nil ((96 . 104) (#("a" 0 1 (fontified t)) . -96) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("d" 0 1 (fontified t)) . -97) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("w" 0 1 (fontified t)) . -98) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (#("a" 0 1 (fontified t)) . -99) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (#("i" 0 1 (fontified t)) . -100) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (#("t" 0 1 (fontified t)) . -101) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (#("a" 0 1 (fontified t)) . -102) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (#(" " 0 1 (fontified t)) . -103) (undo-tree-id56 . -1) (undo-tree-id57 . -1) 104) nil (26612 63731 267965 439000) 0 nil])
([nil nil ((1126 . 1365) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )" 0 19 (fontified t) 19 22 (face font-lock-comment-delimiter-face fontified t) 22 60 (face font-lock-comment-face fontified t) 60 61 (fontified t) 61 64 (face font-lock-comment-delimiter-face fontified t) 64 125 (face font-lock-comment-face fontified t) 125 126 (fontified t) 126 129 (face font-lock-comment-delimiter-face fontified t) 129 183 (face font-lock-comment-face fontified t) 183 184 (fontified t) 184 187 (face font-lock-comment-delimiter-face fontified t) 187 237 (face font-lock-comment-face fontified t) 237 239 (fontified t)) . -1126) (1032 . 1124) (#("
" 0 1 (fontified nil)) . -1032) (1032 . 1033) (1020 . 1024) (1018 . 1019) (946 . 1027) (#(" " 0 1 (fontified nil)) . 946) (680 . 947) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages '(cape corfu dashboard evil gruvbox-theme lsp-ui undo-tree)))" 0 23 (fontified t) 23 26 (face font-lock-comment-delimiter-face fontified t) 26 68 (face font-lock-comment-face fontified t) 68 69 (fontified t) 69 72 (face font-lock-comment-delimiter-face fontified t) 72 133 (face font-lock-comment-face fontified t) 133 134 (fontified t) 134 137 (face font-lock-comment-delimiter-face fontified t) 137 191 (face font-lock-comment-face fontified t) 191 192 (fontified t) 192 195 (face font-lock-comment-delimiter-face fontified t) 195 245 (face font-lock-comment-face fontified t) 245 335 (fontified t)) . -680)) nil (26612 63731 267890 582000) 0 nil])
([nil nil ((1198 . 1437) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )" 0 19 (fontified t) 19 22 (face font-lock-comment-delimiter-face fontified t) 22 60 (face font-lock-comment-face fontified t) 60 61 (fontified t) 61 64 (face font-lock-comment-delimiter-face fontified t) 64 125 (face font-lock-comment-face fontified t) 125 126 (fontified t) 126 129 (face font-lock-comment-delimiter-face fontified t) 129 183 (face font-lock-comment-face fontified t) 183 184 (fontified t) 184 187 (face font-lock-comment-delimiter-face fontified t) 187 237 (face font-lock-comment-face fontified t) 237 238 (fontified t) 238 239 (fontified t)) . -1198) (1104 . 1196) (#("
" 0 1 (fontified nil)) . -1104) (1104 . 1105) (1092 . 1096) (1090 . 1091) (1020 . 1024) (1018 . 1019) (946 . 1094) (#(" " 0 1 (fontified nil)) . 946) (680 . 947) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   '(\"18a1d83b4e16993189749494d75e6adb0e15452c80c431aca4a867bcc8890ca9\"
     default))
 '(package-selected-packages '(cape corfu dashboard evil gruvbox-theme lsp-ui undo-tree)))" 0 23 (fontified t) 23 26 (face font-lock-comment-delimiter-face fontified t) 26 68 (face font-lock-comment-face fontified t) 68 69 (fontified t) 69 72 (face font-lock-comment-delimiter-face fontified t) 72 133 (face font-lock-comment-face fontified t) 133 134 (fontified t) 134 137 (face font-lock-comment-delimiter-face fontified t) 137 191 (face font-lock-comment-face fontified t) 191 192 (fontified t) 192 195 (face font-lock-comment-delimiter-face fontified t) 195 245 (face font-lock-comment-face fontified t) 245 248 (fontified t) 248 270 (fontified t) 270 272 (fontified t) 272 338 (face font-lock-string-face fontified t) 338 339 (fontified t) 339 352 (fontified t) 352 353 (fontified t) 353 354 (fontified t) 354 357 (fontified t) 357 382 (fontified t) 382 383 (fontified t) 383 442 (fontified t) 442 443 (fontified t) 443 444 (fontified t)) . -680)) nil (26612 63743 784662 509000) 0 nil])
([nil nil ((109 . 114) (104 . 109) (103 . 103) (103 . 104) (t . 0)) nil (26612 63756 176411 678000) 0 nil])
([nil nil ((1281 . 1520) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )" 0 239 (fontified nil)) . -1281) (1187 . 1279) (#("
" 0 1 (fontified nil)) . -1187) (1187 . 1188) (1175 . 1179) (1173 . 1174) (1103 . 1107) (1101 . 1102) (1031 . 1035) (1029 . 1030) (957 . 1172) (#(" " 0 1 (fontified nil)) . 957) (691 . 958) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   '(\"75b371fce3c9e6b1482ba10c883e2fb813f2cc1c88be0b8a1099773eb78a7176\"
     \"18a1d83b4e16993189749494d75e6adb0e15452c80c431aca4a867bcc8890ca9\"
     default))
 '(package-selected-packages '(cape corfu dashboard evil gruvbox-theme lsp-ui undo-tree)))" 0 516 (fontified nil)) . -691) (t 26612 63756 175549 576000)) nil (26612 63794 446240 879000) 0 nil])
([nil nil ((1353 . 1592) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )" 0 19 (fontified t) 19 22 (face font-lock-comment-delimiter-face fontified t) 22 60 (face font-lock-comment-face fontified t) 60 61 (fontified t) 61 64 (face font-lock-comment-delimiter-face fontified t) 64 125 (face font-lock-comment-face fontified t) 125 126 (fontified t) 126 129 (face font-lock-comment-delimiter-face fontified t) 129 183 (face font-lock-comment-face fontified t) 183 184 (fontified t) 184 187 (face font-lock-comment-delimiter-face fontified t) 187 220 (face font-lock-comment-face fontified t) 220 237 (face font-lock-comment-face fontified t) 237 239 (fontified nil)) . -1353) (1259 . 1351) (#("
" 0 1 (fontified nil)) . -1259) (1259 . 1260) (1247 . 1251) (1245 . 1246) (1175 . 1179) (1173 . 1174) (1103 . 1107) (1101 . 1102) (1031 . 1035) (1029 . 1030) (957 . 1239) (#(" " 0 1 (fontified nil)) . 957) (691 . 958) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   '(\"5a0ddbd75929d24f5ef34944d78789c6c3421aa943c15218bac791c199fc897d\"
     \"75b371fce3c9e6b1482ba10c883e2fb813f2cc1c88be0b8a1099773eb78a7176\"
     \"18a1d83b4e16993189749494d75e6adb0e15452c80c431aca4a867bcc8890ca9\"
     default))
 '(package-selected-packages '(cape corfu dashboard evil gruvbox-theme lsp-ui undo-tree)))" 0 23 (fontified t) 23 26 (face font-lock-comment-delimiter-face fontified t) 26 68 (face font-lock-comment-face fontified t) 68 69 (fontified t) 69 72 (face font-lock-comment-delimiter-face fontified t) 72 133 (face font-lock-comment-face fontified t) 133 134 (fontified t) 134 137 (face font-lock-comment-delimiter-face fontified t) 137 191 (face font-lock-comment-face fontified t) 191 192 (fontified t) 192 195 (face font-lock-comment-delimiter-face fontified t) 195 245 (face font-lock-comment-face fontified t) 245 272 (fontified t) 272 338 (face font-lock-string-face fontified t) 338 344 (fontified t) 344 410 (face font-lock-string-face fontified t) 410 416 (fontified t) 416 482 (face font-lock-string-face fontified t) 482 588 (fontified t)) . -691)) nil (26612 63815 215986 779000) 0 nil])
([nil nil ((1425 . 1664) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )" 0 19 (fontified t) 19 22 (face font-lock-comment-delimiter-face fontified t) 22 60 (face font-lock-comment-face fontified t) 60 61 (fontified t) 61 64 (face font-lock-comment-delimiter-face fontified t) 64 125 (face font-lock-comment-face fontified t) 125 126 (fontified t) 126 129 (face font-lock-comment-delimiter-face fontified t) 129 183 (face font-lock-comment-face fontified t) 183 184 (fontified t) 184 187 (face font-lock-comment-delimiter-face fontified t) 187 237 (face font-lock-comment-face fontified t) 237 238 (fontified t) 238 239 (fontified t)) . -1425) (1331 . 1423) (#("
" 0 1 (fontified nil)) . -1331) (1331 . 1332) (1319 . 1323) (1317 . 1318) (1247 . 1251) (1245 . 1246) (1175 . 1179) (1173 . 1174) (1103 . 1107) (1101 . 1102) (1031 . 1035) (1029 . 1030) (957 . 1306) (#(" " 0 1 (fontified nil)) . 957) (691 . 958) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   '(\"51fa6edfd6c8a4defc2681e4c438caf24908854c12ea12a1fbfd4d055a9647a3\"
     \"5a0ddbd75929d24f5ef34944d78789c6c3421aa943c15218bac791c199fc897d\"
     \"75b371fce3c9e6b1482ba10c883e2fb813f2cc1c88be0b8a1099773eb78a7176\"
     \"18a1d83b4e16993189749494d75e6adb0e15452c80c431aca4a867bcc8890ca9\"
     default))
 '(package-selected-packages '(cape corfu dashboard evil gruvbox-theme lsp-ui undo-tree)))" 0 23 (fontified t) 23 26 (face font-lock-comment-delimiter-face fontified t) 26 68 (face font-lock-comment-face fontified t) 68 69 (fontified t) 69 72 (face font-lock-comment-delimiter-face fontified t) 72 133 (face font-lock-comment-face fontified t) 133 134 (fontified t) 134 137 (face font-lock-comment-delimiter-face fontified t) 137 191 (face font-lock-comment-face fontified t) 191 192 (fontified t) 192 195 (face font-lock-comment-delimiter-face fontified t) 195 245 (face font-lock-comment-face fontified t) 245 248 (fontified t) 248 270 (fontified t) 270 272 (fontified t) 272 338 (face font-lock-string-face fontified t) 338 339 (fontified t) 339 344 (fontified t) 344 410 (face font-lock-string-face fontified t) 410 411 (fontified t) 411 416 (fontified t) 416 482 (face font-lock-string-face fontified t) 482 483 (fontified t) 483 488 (fontified t) 488 554 (face font-lock-string-face fontified t) 554 555 (fontified t) 555 568 (fontified t) 568 569 (fontified t) 569 570 (fontified t) 570 573 (fontified t) 573 598 (fontified t) 598 599 (fontified t) 599 658 (fontified t) 658 659 (fontified t) 659 660 (fontified t)) . -691)) nil (26612 63827 127739 802000) 0 nil])
([nil nil ((1497 . 1736) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )" 19 22 (face font-lock-comment-delimiter-face) 22 60 (face font-lock-comment-face) 61 64 (face font-lock-comment-delimiter-face) 64 125 (face font-lock-comment-face) 126 129 (face font-lock-comment-delimiter-face) 129 183 (face font-lock-comment-face) 184 187 (face font-lock-comment-delimiter-face) 187 237 (face font-lock-comment-face)) . -1497) (1403 . 1495) (#("
" 0 1 (fontified nil)) . -1403) (1403 . 1404) (1391 . 1395) (1389 . 1390) (1319 . 1323) (1317 . 1318) (1247 . 1251) (1245 . 1246) (1175 . 1179) (1173 . 1174) (1103 . 1107) (1101 . 1102) (1031 . 1035) (1029 . 1030) (957 . 1373) (#(" " 0 1 (fontified nil)) . 957) (691 . 958) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   '(\"5aedf993c7220cbbe66a410334239521d8ba91e1815f6ebde59cecc2355d7757\"
     \"51fa6edfd6c8a4defc2681e4c438caf24908854c12ea12a1fbfd4d055a9647a3\"
     \"5a0ddbd75929d24f5ef34944d78789c6c3421aa943c15218bac791c199fc897d\"
     \"75b371fce3c9e6b1482ba10c883e2fb813f2cc1c88be0b8a1099773eb78a7176\"
     \"18a1d83b4e16993189749494d75e6adb0e15452c80c431aca4a867bcc8890ca9\"
     default))
 '(package-selected-packages '(cape corfu dashboard evil gruvbox-theme lsp-ui undo-tree)))" 0 23 (fontified t) 23 26 (face font-lock-comment-delimiter-face fontified t) 26 68 (face font-lock-comment-face fontified t) 68 69 (fontified t) 69 72 (face font-lock-comment-delimiter-face fontified t) 72 133 (face font-lock-comment-face fontified t) 133 134 (fontified t) 134 137 (face font-lock-comment-delimiter-face fontified t) 137 191 (face font-lock-comment-face fontified t) 191 192 (fontified t) 192 195 (face font-lock-comment-delimiter-face fontified t) 195 245 (face font-lock-comment-face fontified t) 245 248 (fontified t) 248 270 (fontified t) 270 272 (fontified t) 272 338 (face font-lock-string-face fontified t) 338 339 (fontified t) 339 344 (fontified t) 344 410 (face font-lock-string-face fontified t) 410 411 (fontified t) 411 416 (fontified t) 416 482 (face font-lock-string-face fontified t) 482 483 (fontified t) 483 488 (fontified t) 488 554 (face font-lock-string-face fontified t) 554 555 (fontified t) 555 560 (fontified t) 560 626 (face font-lock-string-face fontified t) 626 627 (fontified t) 627 640 (fontified t) 640 641 (fontified t) 641 642 (fontified t) 642 645 (fontified t) 645 670 (fontified t) 670 671 (fontified t) 671 730 (fontified t) 730 731 (fontified t) 731 732 (fontified t)) . -691)) nil (26612 63839 304419 83000) 0 nil])
([nil nil ((104 . 108) (#("l" 0 1 (fontified t)) . -104) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("i" 0 1 (fontified t)) . -105) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("g" 0 1 (fontified t)) . -106) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (#("h" 0 1 (fontified t)) . -107) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (#("t" 0 1 (fontified t)) . -108) (undo-tree-id32 . -1) (undo-tree-id33 . -1) 109 (#("A" 0 1 (fontified t)) . -83) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) 84 (83 . 84) (t . 0)) nil (26612 63849 998334 554000) 0 nil])
([nil nil ((114 . 115) (#("r" 0 1 (fontified t)) . -114) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 115 (114 . 115) (113 . 114) (111 . 112) (109 . 111) (#("h" 0 1 (fontified t)) . -109) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("a" 0 1 (fontified t)) . -110) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (#("r" 0 1 (fontified t)) . -111) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("d" 0 1 (fontified t)) . -112) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (#(" " 0 1 (fontified t)) . -113) (undo-tree-id15 . -1) (undo-tree-id16 . -1) 114 (t 26612 63849 996544 254000)) nil (26612 63917 29831 964000) 0 nil])
([nil nil ((#(";;(load-theme 'wombat t)
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 25 (face font-lock-comment-face fontified t)) . 32) (undo-tree-id0 . -25) (undo-tree-id1 . -24) (t 26612 63917 26396 587000)) nil (26612 64201 154162 184000) 0 nil])
([nil nil ((6437 . 6440) (6428 . 6433) (6429 . 6432) (6427 . 6429) (6422 . 6427) (6419 . 6422) (#(" " 0 1 (fontified t)) . -6419) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 6420 (6416 . 6420) (6413 . 6413) (6413 . 6416) (6412 . 6414) (t 26612 64201 153183 474000)) nil (26612 64504 807751 330000) 0 nil])
([nil nil ((6448 . 6453) (6439 . 6448)) nil (26612 64504 807736 671000) 0 nil])
([nil nil ((6455 . 6456)) nil (26612 64504 807733 38000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-comment-face fontified t)) . -6453) (undo-tree-id2 . 1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) 6454 (t 26612 64504 808847 851000)) nil (26612 64536 20346 389000) 0 nil])
([nil nil ((#("(global-set-key      C-;  'dashboard-open)
" 0 23 (fontified t) 23 26 (face font-lock-comment-delimiter-face fontified t) 26 27 (face font-lock-comment-face fontified t) 27 41 (face font-lock-comment-face fontified t) 41 42 (face font-lock-comment-face fontified t) 42 43 (face font-lock-comment-face fontified t)) . 6412) (undo-tree-id5 . -43) (undo-tree-id6 . -4) (undo-tree-id7 . 2) (undo-tree-id8 . -26) (undo-tree-id9 . -42) (undo-tree-id10 . -40) (undo-tree-id11 . -40) (undo-tree-id12 . -40) (undo-tree-id13 . -40) (undo-tree-id14 . -40) (undo-tree-id15 . -40) (undo-tree-id16 . -40) (undo-tree-id17 . -40) (undo-tree-id18 . -40) (undo-tree-id19 . -40) (undo-tree-id20 . -40) (undo-tree-id21 . -43) 6452 (t 26612 64536 19732 135000)) nil (26612 64542 3083 119000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6457 . 6458) (nil fontified nil 6399 . 6458) (6399 . 6458) 6398 (6398 . 6401) (6321 . 6324) (6304 . 6321) (6368 . 6377) (6347 . 6368) (6326 . 6347) (6305 . 6326) (6303 . 6305) (6296 . 6303) (6275 . 6296) (6254 . 6275) (6233 . 6254) (t 26612 64541 998261 127000)) nil (26612 64643 186461 449000) 0 nil])
([nil nil ((6439 . 6441) (#("w" 0 1 (face font-lock-string-face fontified t)) . -6439) (undo-tree-id122 . -1) (undo-tree-id123 . -1) 6440) nil (26612 64643 186460 478000) 0 nil])
([nil nil ((6457 . 6459) (6455 . 6457) (6454 . 6454) (6454 . 6455) (6452 . 6454) (6448 . 6452) (6445 . 6445) (6445 . 6448) (#("s" 0 1 (fontified t)) . -6445) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (#("o" 0 1 (fontified t)) . -6446) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (#("m" 0 1 (fontified t)) . -6447) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (#("e" 0 1 (fontified t)) . -6448) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (#("-" 0 1 (fontified t)) . -6449) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#("f" 0 1 (fontified t)) . -6450) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (#("u" 0 1 (fontified t)) . -6451) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("n" 0 1 (fontified t)) . -6452) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (#("c" 0 1 (fontified t)) . -6453) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (#("t" 0 1 (fontified t)) . -6454) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (#("i" 0 1 (fontified t)) . -6455) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#("o" 0 1 (fontified t)) . -6456) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (#("n" 0 1 (fontified t)) . -6457) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) 6458) nil (26612 64643 186455 654000) 0 nil])
([nil nil ((6441 . 6442) (t 26612 64643 184258 503000)) nil (26612 64670 916963 646000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6461 . 6462) (#("
" 0 1 (fontified nil)) . -6524) (6461 . 6525) 6408 (t 26612 64670 916479 253000)) nil (26613 7364 902331 621000) 0 nil])
([nil nil ((6502 . 6503) (#("C" 0 1 (face font-lock-string-face fontified t)) . -6502) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) 6503) nil (26613 7364 902331 195000) 0 nil])
([nil nil ((6506 . 6509) (#("h" 0 1 (face font-lock-string-face fontified t)) . -6506) (undo-tree-id66 . -1) (undo-tree-id67 . -1) 6507 (6504 . 6507)) nil (26613 7364 902330 133000) 0 nil])
([nil nil ((6526 . 6535) (6517 . 6526) (6514 . 6514) (6514 . 6517) (#("d" 0 1 (fontified t)) . -6514) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (#("a" 0 1 (fontified t)) . -6515) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (#("s" 0 1 (fontified t)) . -6516) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (#("h" 0 1 (fontified t)) . -6517) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (#("b" 0 1 (fontified t)) . -6518) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (#("o" 0 1 (fontified t)) . -6519) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (#("a" 0 1 (fontified t)) . -6520) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (#("r" 0 1 (fontified t)) . -6521) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (#("d" 0 1 (fontified t)) . -6522) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (#("-" 0 1 (fontified t)) . -6523) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (#("o" 0 1 (fontified t)) . -6524) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("p" 0 1 (fontified t)) . -6525) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (#("e" 0 1 (fontified t)) . -6526) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (#("n" 0 1 (fontified t)) . -6527) (undo-tree-id64 . -1) (undo-tree-id65 . -1) 6528) nil (26613 7365 102550 2000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6536 . 6537) (#("
" 0 1 (fontified nil)) . 6611) (6536 . 6612)) ((#("
(define-key evil-normal-state-map (kbd \"S-right;\") 'switch-to-next-buffer)
" 0 1 (rear-nonsticky nil fontified nil) 1 40 (fontified nil) 40 43 (face font-lock-string-face fontified nil) 43 44 (face font-lock-string-face fontified nil) 44 45 (face font-lock-string-face fontified nil) 45 46 (face font-lock-string-face fontified nil) 46 47 (face font-lock-string-face fontified nil) 47 48 (face font-lock-string-face fontified nil) 48 49 (face font-lock-string-face fontified nil) 49 50 (face font-lock-string-face fontified nil) 50 75 (fontified nil) 75 76 (fontified nil)) . 6536) (undo-tree-id73 . -48) (undo-tree-id74 . -48) (undo-tree-id75 . -1) (undo-tree-id76 . -75) (undo-tree-id77 . -43) (undo-tree-id78 . -1) (undo-tree-id79 . -43) (undo-tree-id80 . -48) (6611 . 6612) (nil rear-nonsticky t 6536 . 6537)) (26613 7366 166895 721000) 0 nil])
([nil nil ((6504 . 6505) (#("r" 0 1 (face font-lock-string-face fontified nil)) . 6504) (6578 . 6579) (#("l" 0 1 (face font-lock-string-face fontified nil)) . 6578) (#(";" 0 1 (face font-lock-string-face fontified nil)) . 6582) (#(";" 0 1 (face font-lock-string-face fontified t)) . 6509) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (6579 . 6583) (#("right" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t)) . 6579) (undo-tree-id85 . -5) (undo-tree-id86 . -5)) ((6579 . 6584) (#("left" 0 1 (face font-lock-string-face fontified nil) 1 4 (face font-lock-string-face fontified nil)) . 6579) (undo-tree-id72 . -1) (6509 . 6510) (6582 . 6583) (6578 . 6579) (#("L" 0 1 (face font-lock-string-face fontified t)) . 6578) (6504 . 6505) (#("R" 0 1 (face font-lock-string-face fontified t)) . 6504)) (26613 7367 358424 831000) 0 nil])
([nil nil ((6504 . 6505) (#("R" 0 1 (face font-lock-string-face fontified t)) . 6504)) nil (26613 7380 619734 7000) 0 nil])
([nil nil ((6578 . 6579) (#("L" 0 1 (face font-lock-string-face fontified t)) . 6578)) nil (26613 7380 619733 460000) 0 nil])
([nil nil ((6597 . 6601) (6596 . 6597) (#("n" 0 1 (fontified t)) . -6596) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (#("e" 0 1 (fontified t)) . -6597) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (#("x" 0 1 (fontified t)) . -6598) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (#("t" 0 1 (fontified t)) . -6599) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (#("-" 0 1 (fontified t)) . -6600) (undo-tree-id95 . -1) 6601) nil (26613 7380 619729 983000) 0 nil])
([nil nil ((6585 . 6586) (6578 . 6579) (6502 . 6503) (6509 . 6510) (t 26613 7380 618451 770000)) nil (26613 7477 825680 459000) 0 nil])
([nil nil ((2571 . 2572) (t 26613 7477 823158 240000)) nil (26613 27415 680877 324000) 0 nil])
([nil nil ((#("" 0 1 (fontified t)) . -2571) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) 2572) nil (26613 27415 680876 600000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2964 . 2965) (nil fontified nil 2571 . 2965) (2571 . 2965)) nil (26613 27415 680810 617000) 0 nil])
([nil nil ((5579 . 5581) (#("5" 0 1 (fontified t)) . -5579) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) 5580 (t 26613 27415 680001 889000)) nil (26617 23762 295500 681000) 0 nil])
([nil nil ((#("" 0 1 (fontified t)) . -7009) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) 7010 (7009 . 7010) (t 26623 36297 737914 722000)) nil (26630 8007 188346 65000) 0 nil])
([nil current ((nil rear-nonsticky nil 7285 . 7286) (nil fontified nil 7009 . 7286) (7009 . 7286)) nil (26630 8007 188326 982000) 0 nil])
nil
